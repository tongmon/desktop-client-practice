Qt 메모

- 개발 환경 관련
Qt Creator에서는 기본적으로 Qml Designer 기능이 꺼져있는데 이를 키려면 Help >> About Plugins >> Qt Quick >> QmlDesigner 를 활성화시키고 Qt Creator를 재시작하면 된다.
Qt Creator의 텍스트 에디터는 Visual Studio와 좀 달라 불편한데 Edit >> Preferences >> Text Editor로 가서 Behavior 탭의 Typing 항목의 Tab key performs auto-indent를 Always로 설정해주면 좀 편해진다.

- 빌드 관련
qmake와 CMake 방식 두개가 가장 추천되는데 간단한 것은 qmake다.
내가 배운 강의에서는 CMake가 빌드 표준으로 자리잡고 있기 때문에 CMake를 추천한다.
CMake가 다 좋은데 약간의 귀찮은 것은 파일을 추가하면 해당 파일이 추가되었는지 CMakeLists.txt에 알려줘야 한다는 것이다.
예를 들어 dog.h, dog.cpp가 추가되었다면 CMakeLists.txt 내에 있는 add_executable 항목에 dog.h, dog.cpp를 추가해주고 세이브해줘야 정상적으로 QtCreator 파일 탭에 보인다.
CMake가 qmake보다 좋은 점은 3rd party 라이브러리를 추가하기가 용이하다는 것이다. 엥간한 오픈 소스 라이브러리들은 CMake로 라이브러리를 추가하는 메뉴얼을 제공하지만 qmake에 관련된 메뉴얼은 거의 없다.

- 주석 관련

/*! 라는 Doxygen이라는 외부 주석 관리 프로그램과 연관된 특수 주석이 Qt에는 존재한다.
Qt Creator에서 /*!를 하고 엔터를 치는 순간 함수 이름, 함수 인자, 반환값 등에 관련해서 손쉽게 주석을 달 수 있도록 구조를 만들어 준다.

- qFatal()
이 녀석이 수행되면 앱을 강제 종료함. 더이상 앱을 수행하기 어렵다고 판단될 때 사용함.
ex) qFatal("App have to shut down!");

- QOjbect
모든 Qt 클래스는 기본적으로 QObject를 상속하고 있다. 그리고 QObject를 상속해서 사용할 때 반드시 클래스 내부에 Q_OBJECT 매크로를 선언해야 QObject의 기능을 정상적으로 이용할 수 있다. QObject를 상속한 클래스들은 Signals and Slots이라는 시스템 사용이 가능하다. (QOjbect끼리 메시지 주고 받는 것이 용이해진다.)
QObject는 복사가 안된다. 동적 할당을 하거나 복사를 하지 않고 사용할 수 밖에 없다.
예를 들어 QObject GetObject() { QObject object; return object; } 이러한 함수 작성이 불가능하다는 것이다.
이렇게 QObject와 같이 자신이 만든 다른 클래스에서도 복사가 되는 것을 막으려면 Q_DISABLE_COPY(클래스 이름)을 Q_OBJECT 매크로를 선언하듯 해주면 된다. (자매품으로 Q_DISABLE_MOVE, Q_DISABLE_COPY_MOVE도 있다...)
QOjbect 상속하는 모든 자식 클래스들은 스마트 포인터를 사용한 것과 같이 자동 메모리 해제 기능을 이용할 수가 있게 된다.
QObject는 템플릿 클래스와 같이 사용할 수 없다.
밑의 예시를 보자.

class Cat : public QObject
{
	Q_OBJECT
public:
	Cat(QObject *parent = nullptr) : QObject(parent) {};
	~Cat() {};
};

class Dog : public QObject
{
	Q_OBJECT
public:
	Dog(QObject *parent = nullptr) : QObject(parent) {};
	~Dog() {};
};

int main(int argc, char *argv[])
{
	QCoreApplication app(argc, argv);
	Cat *myCat = new Cat(&app);
	Dog *myDog = new Dog(&app);
	
	Cat *yourCat = new Cat(&app);
	Dog *yourDog = new Dog(&yourCat);
	delete yourCat;
	
	return app.exec();
}

이러한 상황에서 app 실행이 종료가 되는 시점에 이에 붙어 있던 QObject들을 모두 하나씩 보면서 동적 할당을 해제해주기 때문에 따로 delete를 해줄 필요가 없다.
위 예제에서는 지금 app이 myCat과 myDog의 parent로 위치하기 때문에 따로 할당 해제에 신경을 쓸 필요가 없다.
yourCat을 delete를 해주면 이 녀석에 딸려있던 yourDog까지 같이 할당 해제가 된다.
주의할 점은 Q_OBJECT 매크로가 주석에 있던 실제 코드로 작성이 되었던 해당 파일에 QObject가 사용된 것으로 Qt Creator가 인식을 하고 그 파일에 대한 moc 파일을 생성하려고 시도를 하니 이를 유념하면서 코드를 작성해야 한다.
예를 들어 main.cpp에 Q_OBJECT 글자가 적히면 main에 대한 moc는 생성이 안되기에 컴파일이 안된다.
QObject를 상속하면 생기는 setParent(QObject *), parent() 멤버 함수들로 부모를 설정하거나 획득할 수 있다.
children() 멤버 함수로 자식들 리스트를 가져올 수도 있다.

- Signals and Slots
단순히 말하면 C++의 CallBack 함수이다. MFC나 Win32에서 메시징 시스템이라고 생각하면 쉽다.
순수 C++로 구현한 예시들은 밑 링크에 있다.
https://stackoverflow.com/questions/14189440/c-callback-using-class-member
https://stackoverflow.com/questions/2298242/callback-functions-in-c
하지만 사용하기 불편하고 환경에 따라 변형해서 사용해야 한다.
이를 Qt가 쓰레드 안정적이고 범용적이고 사용하기 쉬운 인터페이스로 만들어 놓은 것이다.
밑은 그 예시다.

class Cat : public QObject
{
    Q_OBJECT
public:
    Cat(QObject *parent = nullptr) : QObject(parent) {};
    ~Cat() {};

signals:
    void Calling(QString strName);

public slots:
    void Run() { qInfo() << sender() << "is Bark! so Run!"; }
};

class Dog : public QObject
{
    Q_OBJECT
public:
    Dog(QObject *parent = nullptr) : QObject(parent) {};
    ~Dog() {};

signals:
    void Bark();

public slots:
    void Hearing(QString strName)
    {
        qInfo() << "Dog hears Cat is calling" << strName;
    }
};

int main(int argc, char *argv[])
{
	QCoreApplication app(argc, argv);
	
    Dog myDog(&app);
    Cat myCat(&app);
	
    QObject::connect(&myDog, &Dog::Bark, &myCat, &Cat::Run);
    QObject::connect(&myCat, &Cat::Calling, &myDog, &Dog::Hearing);
	
	emit myDog.Bark();
	
	QObject::disconnect(&myDog, &Dog::Bark, &myCat, &Cat::Run);
	
	emit myCat.Calling("doggy");
	
	return app.exec();
}

위의 상황에서 myDog의 Bark() 함수를 호출하면 자동적으로 myCat의 Run()함수도 호출된다. 즉 signal을 보내면 slot이 반응하는 것이다.
singal의 함수 인자가 QString이라면 이에 반응하는 slot의 함수 인자도 QString으로 동일해야 한다. 즉 연결할 signal과 slot의 함수 인자 형식을 맞춰줘야 한다.
connect() 함수를 이용해서 singal과 slot을 연결한다.
connect() 함수는 많은 옵션이 있는데 default 옵션은 AutoConnection이다. 
이러한 경우 QObject::connect(&myDog, &Dog::Bark, &myCat, &Cat::Run); QObject::connect(&myDog, &Dog::Bark, &myCat, &Cat::Run); 두 번 쓰여지면 Bark() 한번에 Run()이 두번 실행되게 된다. 이를 해결하려면 QObject::connect(&myDog, &Dog::Bark, &myCat, &Cat::Run, Qt::UniqueConnection); 이렇게 connection 옵션을 마지막에 넣어주면 된다. (다른 옵션도 많으니 Qt document에서 찾아보자.)
signal을 보낼 때는 꼭 emit myDog.Bark();와 같이 emit을 붙이고 signal 함수를 호출해야 한다.
signals에 정의된 함수들은 선언만 해야하며 slots에 있는 함수는 선언과 구현을 모두 해야한다.
slots에 구현된 함수는 일반 함수처럼 사용할 수 있다. 
slots에 구현된 함수 내부에서는 sender()라는 함수를 사용할 수 있는데 signal을 보낸 QObject의 주소를 반환한다.
하나의 signal에 여러개의 slot이 연결될 수 있다.
연결을 끊을 때는 disconnect() 함수를 이용하면 된다.

- Q_PROPERY
C#에서 잘 쓰이는 프로퍼티 바인딩을 Qt에서 C++에서도 사용할 수 있게 해놓은 것이다.
기본적인 형태은 다음과 같다.
Q_PROPERY(type name READ name WRITE setname NOTIFY nameChanged)
처음부터 각각 type -> 바인딩할 변수 타입, name -> 바인딩할 변수 이름 / READ / name -> getter 함수 이름 / WRITE / setname -> setter 함수 이름 / NOTIFY / nameChanged -> 바인딩 변수에 변화가 생길 때 트리거 되는 함수 이름
밑은 예시이다.

class Dog : public QObject
{
    Q_OBJECT
    Q_PROPERTY(int Age READ GetAge WRITE SetAge NOTIFY AgeChanged)
    Q_PROPERTY(QString Name READ GetName WRITE SetName NOTIFY NameChanged)

    int m_nAge;
    QString m_strName;

public:
    Dog(QObject *parent = nullptr) : QObject(parent)
    {
        connect(this, &Dog::NameChanged, this, &Dog::PrintWhenNameChanged);
        connect(this, &Dog::AgeChanged, this, &Dog::PrintWhenAgeChanged);
    };
    ~Dog() {};

    const QString& GetName() const { return m_strName; }
    void SetName(const QString &str) { m_strName = str; emit NameChanged(); }

    const int& GetAge() const { return m_nAge; }
    void SetAge(const int &num) { m_nAge = num; emit AgeChanged(); }

public slots:
    void PrintWhenNameChanged() { qInfo() << "Name is Changed!"; }
    void PrintWhenAgeChanged() { qInfo() << "Age is Changed!"; }

signals:
    void NameChanged();
    void AgeChanged();
};

int main(int argc, char *argv[])
{
    QCoreApplication app(argc, argv);

    Dog *myDog = new Dog(&app);
    QObject *myObject = myDog;

    myDog->SetName("MeatBoy");
    qInfo() << myDog->GetName();

    myObject->setProperty("Name", "BandageGirl");
    qInfo() << myObject->property("Name").toString();

    myDog->SetAge(9);
    qInfo() << myDog->GetAge();

    myObject->setProperty("Age", "11");
    qInfo() << myObject->property("Age").toInt();

    return app.exec();
}

위 코드에서 Q_PROPERTY(QString Name READ GetName WRITE SetName NOTIFY NameChanged) 이렇게 선언한 것을 볼 수가 있다.
주의할 점은 NOTIFY 부분인데 NOTIFY NameChanged를 했다고 해서 SetName 함수가 호출될 때 emit NameChanged() 해주는 것이 아니다. (단, QML에서는 emit을 자동으로 해준다고 한다.)
따라서 C++에서 사용할 때는 SetName에 emit NameChanged()를 넣어줘야 한다.
property 함수가 호출되면 알맞은 getter가 setProperty 함수가 호출되면 알맞은 setter가 실행된다.
C++에서의 Q_PROPERTY 사용 의미는 주로 여러 개의 QObject를 일괄 처리할 때인데 잘보면 Age는 int인데 setProperty("Age", "11")로 스트링 형태로 넣어줘도 잘 처리되는 것을 볼 수 있다.
Q_PROPERY와 signals and slots 기술은 Qt의 moc 파일 생성을 통해 작동하기 때문에 컴파일 도중 변경된 moc 파일을 적용하겠다고 물어보면 yes to all을 누르는 것이 좋다.

- Qt에서의 예외처리
C++에서와 동일한데 qWarning()을 같이 사용하는 것이 권장된다.
밑은 코드 예시이다.

class CustomException : public std::exception
{
private:
    const char* m_strMessage;
public:
    CustomException(const char* strMsg)
    {
        m_strMessage = strMsg;
    }
    const char* what() const throw()
    {
        return m_strMessage;
    }
};

bool DivideSomething(int nNumer, int nDenom, int& nRet)
{
    try {
        if(!nDenom)
            throw CustomException("Can't divide number by zero!");
        nRet = nNumer/nDenom;
    }
    catch (CustomException& e) {
        qWarning() << e.what();
        return false;
    }
    return true;
}

int main(int argc, char *argv[])
{
    QCoreApplication app(argc, argv);

    int nRet = 0;
    DivideSomething(5, 0, nRet);
    return app.exec();
}

위 코드 처럼 예외처리 클래스를 따로 정의해서 해도 되고 그냥 throw QString("Error!");처럼 문자열 자체를 던져버려도 된다.

- QSettings
앱 설정을 위한 ini 파일에 관련된 클래스이다.
밑의 예시와 같이 쓰인다.

QCoreApplication::setOrganizationName("Company Name"); // QSetting이 저장될 경로에 쓰인다. 보통 회사 이름이나 개인 프로젝트의 경우 자신의 닉네임을 적는다.
QCoreApplication::setOrganizationDomain("Company Domain"); // QSetting에 쓰일 회사 도메인을 적는다.
QCoreApplication::setApplicationName("App Name"); // QSetting이 저장될 경로에 쓰인다. 어플리케이션 이름을 적으면 된다.

QSettings settings; // 각 플랫폼마다 존재하는 시스템 폴더에 위에서 설정된 setOrganizationName, setOrganizationDomain, setApplicationName 이 조합된 폴더를 생성하여 ini 파일이 이미 있다면 읽어오고 없다면 새로 저장한다.

QSettings settings(filename, QSettings::Format::IniFormat); // 지정된 filename으로 ini 형식의 파일을 저장한다. 보통 이 방식을 많이 사용한다. 참고로 QCoreApplication::applicationDirPath() 함수는 현재 어플리케이션이 가동되고 있는 폴더 위치를 반환해준다.

settings.setValue("Section_01/Key_01", 1); // [Section_01]에 Key_01 값을 1로 설정한다.
int nKeyValue = settings.value("Section_01/Key_01").toInt(); // [Section_01]에 Key_01 값을 int로 가져온다.
settings.setValue("Section_02/Key_02", "Name");
QString strKeyValue = settings.value("Section_02/Key_02", "Default Value").toString(); // [Section_02]에 Key_02 값을 가져오는데 해당 값이 없다면 default value로 지정된 "Default Value" 스트링을 가져온다.
settings.setValue("Section_03/Key_03", true);
bool bKeyValue = settings.value("Section_03/Key_03").toBool();

위의 상태에서 ini 파일은 다음과 같이 저장된다.
[Section_01]
Key_01=1

[Section_02]
Key_02=Name

[Section_03]
Key_03=true

"Section_01/Key_01" 이렇게 "섹션/키"로 구성하여 함수 인자에 넘기는 방법도 있지만 그룹핑을 사용하는 방식도 있다.

settings.beginGroup("Section_04");
settings.setValue("Key_04", 'A');
char chVar = settings.value("Key_04", 'a').toChar();
settings.endGroup();

위의 방식에서 주의할 점은 꼭 endGroup을 통해 그룹 지정을 해제해주어야 한다.
ini에서 값을 가져오기만 하는 경우는 따로 저장이나 동기 함수를 호출할 필요가 없지만 ini 값을 변경하는 경우는 settings.sync(); 함수로 ini 파일의 변경을 적용해야 한다.

Section과 각 Key값을 순회하고 싶다면 다음과 같이 for문을 사용한다.

// 그룹 순회
for (QString& group : settings.childGroup) {
	settings.beginGroup(group);
	// 키 순회
	for (QString& key : settings.childKeys()) {
	
	}
	settings.endGroup();	
}

- C++ vs Qt

1. std::cout <-> qInfo() [또는 qDebug(), qCritical(), qWarning() 등등...]
차이라면 버퍼를 비워주는 flush를 qInfo()에서는 인위적으로 해줄 필요가 없다. cout에서 endl을 많이 쓰면 안좋다는 말이 flush가 endl에서 같이 수행되기 때문인데 qInfo()에서는 endl을 사용할 필요가 없다.

2. static_cast, dynamic_cast... 등등 표준 형변환 vs qobject_cast
일단 qobject_cast는 QObject를 상속한 클래스에서만 사용이 가능하기에 나머지 상황에서는 표준 형변환을 써야한다.
QObject를 상속한 클래스에서는 qobject_cast를 사용하는 것이 안전하다.

3. int, long, long long... vs qint8, qint16, qint32...
OS별로 코드를 따로 짜고 싶지 않다면 qint형을 사용하는 것이 편하다.

4. QString vs std::string
Qt에서는 QString을 사용하는 것이 좋다.
std::string에서는 지원하지 않는 split, arg, asprintf 등의 편의 기능을 QString은 가지고 있다. 또한 QString은 wchar과 char를 유동적으로 지원한다.

5. delete vs qDeleteAll
크기가 큰 배열, 구조체 묶음 등을 동적 할당 해제하는 경우에는 qDeleteAll이 편하다.
특히나 리스트 구조가 아닌 경우 사용하기 용이한데 밑은 그 예시이다.
QMap<QString, int*> map;
for (int i = 0; i < 5; i++)
	map.insert(QString::number(i), new int(i));
qDeleteAll(map);
위와 같이 qDeleteAll만 하면 비선형 구조도 알아서 동적 할당된 5개의 int*를 해제해준다.

6. std::unique_ptr vs QScopedPointer / std::shared_ptr vs QSharedPointer
QScopedPointer, QSharedPointer는 std::move를 지원하지 않는다. 반면 표준 스마트포인터는 지원한다. 그냥 표준 스마트 포인터를 써라.

7. std::vector vs QList, QVector
QList와 QVector는 Qt6에서는 동일해졌고 Qt5에서는 약간 다르긴 하지만 그냥 그게 그거라고 보면 된다.
std::vector와 QList 둘 다 거기서 거기긴 한데 QList에 붙어있는 기능이 좀 더 많다.
QList는 밑과 같은 표현이 가능하다.
QList lstNum; 
lstNum << 1 << 2 << 3;
이러면 lstNum에는 1, 2, 3이 들어있는 것이다.
그 외의 sliced(), count(), removeAll() 등 표준 std::vector를 이용해서 직접 구현해야 하는 내용들이 QList에는 이미 구현이 되어 있다.

8. std::unordered_set vs QSet
얘도 거기서 거기인데 QList 같이 operator << 이게 재정의되어 있기 때문에 좀 더 편하긴 하다.
그리고 unordered_set 같은 경우는 비교를 할 때 setVar.find(2) != setVar.end() 이렇게 찾아야하는데 QSet에서는 setVar.contains(2) 로 끝난다.

9. std::unordered_map vs QMap
QMap이 좀 더 편하다.
예를 들어 key와 value 묶음을 따로 얻고 싶다면 C++에서는 밑의 방식을 사용한다.
std::unordered_map<std::string, int> map;
std::vector<std::string> keys(map.size());
transform(map.begin(), map.end(), keys.begin(), key_selector);
std::vector<int> values(map.size());
transform(map.begin(), map.end(), values.begin(), value_selector);
반면 Qt에서는 다음과 같다.
QMap<QString, int> map;
QList keys = map.keys();
QList values = map.values();
그리고 QSet과 같이 contains() 함수로 end() iterator 비교 없이 key 유무를 간단하게 확인할 수 있다.
또 value()라는 함수의 특이한 기능이 있는데 map.value(key, default value) 로 사용할 수 있는데 map에서 주어진 key가 존재하면 해당 key의 묶인 value 값을, 존재하지 않으면 default value 값을 리턴하는 함수이다.

10. std::vector<std::string> vs QStringList
그냥 QStringList 써라. 만약 QList<QString>을 사용하고 싶은 경우에도 QStringList 써라.
QStringList는 직접 구현하기 귀찮은 기능들이 많이 구현되어 있다.
strlst.replaceInStrings("a", "@"); 를 사용하면 QStringList 내의 모든 스트링에 포함된 'a'는 '@'로 교체된다.
strlst.join(","); 를 사용하면 QStringList 내의 모든 스트링이 ,를 사용하여 하나의 스트링으로 정렬된다. ex) { "눈사람", "나무" } -> "눈사람, 나무"
filter("r")를 사용하면 QStringList 내에서 'r'이 포함된 문자열만 반환된다.
