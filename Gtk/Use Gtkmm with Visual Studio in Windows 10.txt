본 파일은 GUI 프레임워크인 Gtkmm을 Windows 10 운영체제에서 Visual Studio IDE를 통해 빌드할 수 있도록 자세한 절차가 적혀있다.
당연히 Visual Studio 2022와 Windows SDK는 개발환경에 설치가 되어있다고 가정하고 절차를 작성했다.

1. MSYS2를 "C:\msys64" 경로를 만들고 거기에 설치한다. (설치 링크: https://www.msys2.org/)

2. MSYS2를 실행한다. (콘솔창에 "사용자이름@데스크탑 이름 MSYS ~" 요렇게 뜨고 커서가 깜박여야 정상이다.) 

3. pacman -Syu 명령어를 실행한 뒤에 pacman -Su 명령어를 실행한다. (MSYS2를 껏다가 킬 필요가 있다면 껏다가 킨다.)

4. 다시 pacman -Syu 명령어를 실행해보고 더 설치할 것이 있으면 설치한다. 없으면 다음 절차로 넘어간다.

5. pacman -S mingw-w64-x86_64-gcc 명령어를 수행하여 gcc를 설치한다. (어짜피 빌드는 VS에서 할 것이기 때문에 64비트용 디버거만 설치한다.)

6. pacman -S mingw-w64-x86_64-gtkmm-4.0 명령어를 수행하여 gtkmm 4.0 버전을 설치한다. (종속되어 있는 나머지 라이브러리들은 알아서 다 같이 설치해준다.)

7. pacman -S pkg-config 명령어를 수행하여 패키지 관리를 쉽게 하기 위해 pkg-config를 설치한다. (사실 별 필요없을 것이다. MSYS2에서 하는 짓은 결과적으로 GTK UI 툴인 glade를 실행하기 위한 것이기 때문...)

8. pacman -S mingw-w64-x86_64-glade 명령어를 수행하여 GTK UI 툴인 glade를 설치한다. (C:\msys64\mingw64\bin\glade.exe가 위치한다. 편하게 쓰고 싶으면 바로가기를 만들어서 쓰던 해라.)

9. 혹시 모르니 pacman -S --needed base-devel mingw-w64-x86_64-toolchain 명령어를 수행하여 빌드 관련된 다른 툴들을 깔기 위해 목록에 나온 것들을 전부 설치한다.(그냥 엔터치면 전체 설치가 될 것이다.)

10. 만약 "set by the XDG_DATA_HOME and XDG_DATA_DIRS" 라는 문구가 설치 뒤에 뜬다면 export XDG_DATA_HOME=$XDG_DATA_HOME:c/msys64/mingw64/share와 export XDG_DATA_DIRS=$XDG_DATA_DIRS:c/msys64/mingw64/share 명령으로 환경변수를 설정해주자.

10. 고급 시스템 설정 보기에 들어가 고급 탭을 선택하고 환경 변수를 설정해줘야 한다. 사용자 변수 항목에 Path를 편집하여 "C:\msys64\mingw64\bin" 경로를 넣어주고 적용한다. (혹시 모르니 재부팅을 해주면 좋을 것이다.)

10. 이제 vcpkg를 설치해야 하는데 난 git으로 파일을 잘 안따오니 그냥 https://github.com/microsoft/vcpkg 여기서 code를 누르고 Downlode ZIP 옵션을 선택하여 ZIP 파일 통째로 받은 뒤에 "C:\vcpkg" 경로를 만들고 거기에 압축 파일을 해제한다. (잘 해제했으면 "C:\vcpkg\.github" 이렇게 위치해 있을 것이다.)

11. 관리자 모드로 cmd를 실행하고 cd C:\vcpkg 명령어를 수행하여 bootstrap-vcpkg.bat이 있는 곳으로 이동한다.

12. bootstrap-vcpkg.bat을 cmd에서 실행한다. 이러면 vcpkg.exe가 생성될 것이다.

13. 고급 시스템 설정 보기에 들어가 고급 탭을 선택하고 환경 변수를 설정해줘야 한다. 사용자 변수 항목에 Path를 편집하여 "C:\vcpkg" 경로를 넣어주고 적용한다. (혹시 모르니 재부팅을 해주면 좋을 것이다.)

14. 관리자 모드로 cmd를 실행하고 cd C:\vcpkg 명령어를 수행하고 vcpkg integrate install 명령어를 수행하여 VS와 vcpkg를 연동한다.

15. Visual Studio Installer를 켜서 언어 팩에서 영어를 추가적으로 설치한다.

16. Visual Studio Installer에서 "C++를 사용한 Linux 및 임베디드 개발"을 설치한다.

17. 제어판 -> 국가 또는 지역 -> 관리자 옵션 탭 -> 시스템 로캘 변경 -> 현재 시스템 로캘을 영어(미국)으로 바꾸고 재부팅해라.(이거 안해도 잘 되는 사람 있을 텐데 나는 아니였음.)

18. 이제 gtkmm을 사용할 프로젝트를 만들어라(c++ 빈 프로젝트로 만들어도 되고 데스크탑 마법사를 이용해 데스크탑용 빈 프로젝트를 만들어도 좋다. 다만 콘솔 빈 프로젝트로 만들 경우 콘솔창이 같이 띄워지기 때문에 메인 entry가 WinMain인 데스크탑용 빈 프로젝트를 추천한다.)

19. 이제 다시 vcpkg를 이용해야 하는데 방식이 두 가지가 있다. 둘 중에 하나만 하면 된다.

19-1. 첫번째는 Manifest Mode로 vcpkg를 이용하는 방법으로 vcpkg 제작자들이 권장하는 방법이다. (근데 편리하고 용량도 아껴지는건 두번째 방법이다...)

19-1-1. 일단 아래와 같은 내용을 "복사/붙여넣기"하고 vcpkg.json라고 이름을 지어준 뒤에 해당 파일을 프로젝트의 .sln 파일이 있는 곳에 붙여넣어준다.
{
  "$schema": "https://raw.githubusercontent.com/microsoft/vcpkg/master/scripts/vcpkg.schema.json",
  "name": "project-name",
  "version": "1.0.0",
  "dependencies": [
    "gtkmm"
  ]
}

19-1-2. 붙여넣은 vcpkg.json를 좀 수정해줘야 하는데 name을 수정해줘야 한다. name에는 프로젝트 이름이 들어가야 하며 소문자 알파벳, 숫자, 하이푼만이 들어갈 수 있고 이름이 하이푼으로 시작되어서도 끝을 맺어서도 안된다. 예를 들어 GTK.Sample이 프로젝트 이름이라면 gtk-sample로 바꿔서 name란에 써주어야 한다. Manifest Mode에 대한 자세한 내용은 https://github.com/microsoft/vcpkg/blob/master/docs/users/manifests.md 여기에 더 쓰여있으니 dependencies를 추가하거나 수정이 필요하다 싶으면 참고하자.

19-1-3. .sln 파일을 클릭해서 프로젝트를 열고 프로젝트 속성을 들어가서 구성 속성 -> vcpkg -> Use Vcpkg Manifest 를 '예'로 바꿔준다. 또 구성 속성 -> 일반 -> C++ 언어 표준을 C++17 이상으로 맞춰주고 소스코드 아무거나 생성하고 빌드를 해줘서 Manifest에 지정된 데로 vcpkg에서 종속된 라이브러리들을 설치하도록 한다.

19-1-4. 라이브러리가 잘 설치되었다면 프로젝트 폴더에 vcpkg_installed라는 폴더가 생성이 되었을 텐데 각자 빌드 환경에 맞게 헤더 파일 경로를 지정해주어야 한다. 프로젝트 속성을 들어가서 구성 속성 -> VC++ 디렉터리 -> 외부 include 디렉터리에 vcpkg_installed 폴더 내부에 있는 적절한 프로젝트 세팅에 걸맞는 헤더 파일 경로들을 추가해준다. 예를 들어 x64 빌드에서는 밑에 쓰여있는 헤더 경로들이 들어가야 할 것이다. (주의할 점은 gtkmm이 요구하는 헤더파일이 lib 폴더에도 위치하고 있다는 것이다... 빌드가 잘 안되고 있다면 꼼꼼히 빠진 헤더 파일 경로가 있는지 재차 확인해보자.)
//-------------------------------------------------------------------------------------------------------------------------------------------------------
$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\include;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\include\atk-1.0;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\include\atkmm-2.36;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\include\brotli;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\include\cairo;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\include\cairomm-1.16;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\include\epoxy;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\include\fontconfig;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\include\freetype;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\include\fribidi;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\include\gdk-pixbuf-2.0;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\include\giomm-2.68;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\include\gio-win32-2.0;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\include\glib-2.0;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\include\glibmm-2.68;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\include\graphene-1.0;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\include\gtk-4.0;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\include\gtkmm-4.0;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\include\harfbuzz;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\include\libpng16;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\include\lzma;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\include\lzo;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\include\pango-1.0;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\include\pangomm-2.48;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\include\pixman-1;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\include\sass;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\include\sigc++-3.0;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\lib\atkmm-2.36\include;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\lib\cairomm-1.16\include;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\lib\giomm-2.68\include;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\lib\glib-2.0\include;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\lib\glibmm-2.68\include;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\lib\graphene-1.0\include;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\lib\gtkmm-4.0\include;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\lib\pangomm-2.48\include;$(SolutionDir)\vcpkg_installed\x64-windows\x64-windows\lib\sigc++-3.0\include;
//-------------------------------------------------------------------------------------------------------------------------------------------------------

19-2-1. 두번째 방법은 전역적으로 모든 프로젝트에 적용할 수 있는 방법인데 관리자 모드로 cmd창을 열고 cd C:\vcpkg 명령어로 이동하고 vcpkg install gtkmm 명령을 실행해 x86 빌드 전용 gtkmm을 설치하고 vcpkg install gtkmm:x64-windows 명령을 실행해 x64 빌드 전용 gtkmm도 마저 설치해준다.

19-2-2. 라이브러리 설치 후에 각자 빌드 환경에 맞게 헤더 파일 경로를 지정해주어야 한다. "C:\vcpkg\installed" 이 곳에 가보면 설치된 라이브러리가 많을 텐데 각자 프로젝트 빌드 환경에 걸맞는 헤더 파일 경로를 프로젝트 속성 -> 구성 속성 -> VC++ 디렉터리 -> 외부 include 디렉터리에 추가해준다.
예시를 밑에 써주겠다. (19-1-4. 에 쓰여진 경로와 다를 것이 "$(SolutionDir)\vcpkg_installed\x64-windows" -> "$(VcpkgRoot)\installed" 요거 밖에 없다...)
//-------------------------------------------------------------------------------------------------------------------------------------------------------
$(VcpkgRoot)\installed\x64-windows\include;$(VcpkgRoot)\installed\x64-windows\include\atk-1.0;$(VcpkgRoot)\installed\x64-windows\include\atkmm-2.36;$(VcpkgRoot)\installed\x64-windows\include\brotli;$(VcpkgRoot)\installed\x64-windows\include\cairo;$(VcpkgRoot)\installed\x64-windows\include\cairomm-1.16;$(VcpkgRoot)\installed\x64-windows\include\epoxy;$(VcpkgRoot)\installed\x64-windows\include\fontconfig;$(VcpkgRoot)\installed\x64-windows\include\freetype;$(VcpkgRoot)\installed\x64-windows\include\fribidi;$(VcpkgRoot)\installed\x64-windows\include\gdk-pixbuf-2.0;$(VcpkgRoot)\installed\x64-windows\include\giomm-2.68;$(VcpkgRoot)\installed\x64-windows\include\gio-win32-2.0;$(VcpkgRoot)\installed\x64-windows\include\glib-2.0;$(VcpkgRoot)\installed\x64-windows\include\glibmm-2.68;$(VcpkgRoot)\installed\x64-windows\include\graphene-1.0;$(VcpkgRoot)\installed\x64-windows\include\gtk-4.0;$(VcpkgRoot)\installed\x64-windows\include\gtkmm-4.0;$(VcpkgRoot)\installed\x64-windows\include\harfbuzz;$(VcpkgRoot)\installed\x64-windows\include\libpng16;$(VcpkgRoot)\installed\x64-windows\include\lzma;$(VcpkgRoot)\installed\x64-windows\include\lzo;$(VcpkgRoot)\installed\x64-windows\include\pango-1.0;$(VcpkgRoot)\installed\x64-windows\include\pangomm-2.48;$(VcpkgRoot)\installed\x64-windows\include\pixman-1;$(VcpkgRoot)\installed\x64-windows\include\sass;$(VcpkgRoot)\installed\x64-windows\include\sigc++-3.0;$(VcpkgRoot)\installed\x64-windows\lib\atkmm-2.36\include;$(VcpkgRoot)\installed\x64-windows\lib\cairomm-1.16\include;$(VcpkgRoot)\installed\x64-windows\lib\giomm-2.68\include;$(VcpkgRoot)\installed\x64-windows\lib\glib-2.0\include;$(VcpkgRoot)\installed\x64-windows\lib\glibmm-2.68\include;$(VcpkgRoot)\installed\x64-windows\lib\graphene-1.0\include;$(VcpkgRoot)\installed\x64-windows\lib\gtkmm-4.0\include;$(VcpkgRoot)\installed\x64-windows\lib\pangomm-2.48\include;$(VcpkgRoot)\installed\x64-windows\lib\sigc++-3.0\include;
//-------------------------------------------------------------------------------------------------------------------------------------------------------

20. 그 다음 빌드가 완료되도록 실제 작동하는 코드로 만들어 줘야 한다. 프로젝트에 main.cpp를 만들어준다. (나머지 .h, .cpp 파일이 있을리가 없겠지만 있다면 지우고 main.cpp만 남긴다.)

20-1. 첫번째 유형은 빈 콘솔 프로젝트인데 아래와 같은 코드를 "복사/붙여넣기" 한다.
//-------------------------------------------------------------------------------------------------------------------------------------------------------
#include <gtkmm.h>

class MyWindow : public Gtk::Window
{
public:
	MyWindow();
};

MyWindow::MyWindow()
{
	set_title("Basic application");
	set_default_size(200, 200);
}

int main(int argc, char* argv[])
{
	auto app = Gtk::Application::create("org.gtkmm.examples.base");

	return app->make_window_and_run<MyWindow>(argc, argv);
}
//-------------------------------------------------------------------------------------------------------------------------------------------------------
빌드 후 실행하면 된다. 콘솔 프로젝트이기에 콘솔 창과 gtkmm 어플리케이션 창이 둘 다 띄워질 것이다.

20-2. 두번째 유형은 윈도우 데스크탑 프로젝트인데 아래와 같은 코드를 "복사/붙여넣기" 한다.
//-------------------------------------------------------------------------------------------------------------------------------------------------------
#include <gtkmm.h>
#include <windows.h>

class MyWindow : public Gtk::Window
{
public:
	MyWindow();
};

MyWindow::MyWindow()
{
	set_title("Basic application");
	set_default_size(200, 200);
}

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
	LPSTR lpCmdLine, int nCmdShow)
{
	auto app = Gtk::Application::create("org.gtkmm.examples.base");

	return app->make_window_and_run<MyWindow>(__argc, __argv);
}
//-------------------------------------------------------------------------------------------------------------------------------------------------------
빌드 후 실행하면 된다. 다른 윈도우 어플리케이션 같이 추가적인 콘솔창 없이 잘 작동한다.

21. 빌드가 잘 된다고 끝난 것이 아니라 배포시에도 추가적인 절차가 필요하다. 일단 배포 대상 컴퓨터에 최신 "Microsoft Visual C++ 재배포 패키지"가 설치되어 있어야 한다. 


Win7 문제에 대한 open post, 아직 해결 안되고 있음...
https://www.datatable.online/en/blog/002-how-to-deploy-gtk-app-on-windows.html#prepare-app-directory-structure
https://gist.github.com/mjakeman/0add69647a048a5e262d591072c7facb
